/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* preorderTraversal(struct TreeNode* root, int* returnSize)
{
    int *result = NULL;
if (root == NULL)
    return result;
result = (int *)malloc(sizeof(int));   //动态分配内存
*result = root->val;

int leftsize=0, rightsize=0, *leftarr, *rightarr;
if (root->left)
    leftarr = preorderTraversal(root->left, &leftsize);
if (root->right)
    rightarr = preorderTraversal(root->right, &rightsize);

*returnSize = 1 + leftsize + rightsize;   //计算所需数组大小
if (leftsize >0 || rightsize > 0)
    result = (int *)realloc(result, sizeof(int)*(*returnSize));//重新给已经malloc的数组分配内存空间

int i, j;
for (i=0; i<leftsize; i++)
    result[i+1] = leftarr[i];
if (leftsize > 0)
    free(leftarr);
for (j=0; j<rightsize; j++)
    result[i+j+1] = rightarr[j];
if (rightsize > 0)
    free(rightarr);//输出数组并释放空间
    
return result;
}
