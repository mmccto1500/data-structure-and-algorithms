/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *columnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int maxDepthTree (struct TreeNode* root);
void InOrder (struct TreeNode* root, int** array, int* nums, int depth);
void arrayAdd (int** array, int size);

int** levelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {
  int maxDepth = *returnSize = maxDepthTree (root); 
  int** array = (int**) calloc (maxDepth, sizeof (int*));
  *columnSizes = (int *) calloc (maxDepth, sizeof (int));
  for (int i = 0; i < maxDepth; i++)
    (*columnSizes)[i] = 0;
  InOrder (root, array, *columnSizes, 0);
  return array;
}

int maxDepthTree (struct TreeNode* root)  //返回树的最大高度maxDepth，也即二维数组中数组的个数.
{
  if (root == NULL)
    return 0;
  int DepthL = maxDepthTree (root->left) + 1;
  int DepthR = maxDepthTree (root->right) + 1;
  return DepthL > DepthR ? DepthL : DepthR;
}

void InOrder (struct TreeNode* root, int** array, int* nums, int depth)//产生数组
{
  if (root == NULL)
    return;
  InOrder (root->left, array, nums, depth + 1);
  arrayAdd (&array[depth], nums[depth]);
  array[depth][nums[depth]++] = root->val;
  InOrder (root->right, array, nums, depth + 1);
}

void arrayAdd (int** array, int size)//将某个节点的val值赋给到数组中并调整数组大小
{
  int* temp = *array;
  *array = (int *) calloc (size + 1, sizeof (int));
  for (int i = 0; i < size; i++)
    (*array)[i] = temp[i];
  free (temp);
}
